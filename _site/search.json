[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Karl Forner’s blog",
    "section": "",
    "text": "Organizing R development using srcpkgs\n\n\n\n\n\n\nR\n\n\nsrcpkgs\n\n\ndev\n\n\n\n\n\n\n\n\n\nMay 27, 2024\n\n\nKarl Forner\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "contributions.html",
    "href": "contributions.html",
    "title": "my OpenSource contributions",
    "section": "",
    "text": "Perl\n\nDBIx::Class::LookupColumn (with Thomas Rubbatel) - https://metacpan.org/pod/DBIx::Class::LookupColumn::Auto\n\nR\n\nsrcpkgs: https://github.com/kforner/srcpkgs\nRcppProgress: https://github.com/kforner/rcpp_progress\nPlinker: https://github.com/kforner/plinker_pkg (note: not on CRAN)\nquartzbio.edp: https://github.com/kforner/quartzbio.edp\nallelic (fueatest): https://cran.r-project.org/web/packages/allelic/index.html (removed from CRAN), https://github.com/kforner/fueatest\nsnplinkage (with others): https://cran.r-project.org/web/packages/snplinkage/\n\n\n\n\n\nTransmart docker: https://github.com/kforner/docker_transmart\nR coverage patch: adding test coverage support in the R interpreter\n\nhttps://github.com/kforner/r-coverage-patch\nhttps://github.com/kforner/r-coverage-docker\n\n\n\n\n\n\n\n\n\ndebugme: https://github.com/r-lib/debugme/pull/21\ndevtools:\n\nhttps://github.com/r-lib/devtools/pull/334\n\n\ncovr:\n\nhttps://github.com/r-lib/covr/pull/202\nhttps://github.com/r-lib/covr/pull/193\nhttps://github.com/r-lib/covr/pull/123\nhttps://github.com/r-lib/covr/pull/32\nhttps://github.com/r-lib/covr/pull/30\n\nhttptest:\n\nhttps://github.com/nealrichardson/httptest/pull/79\nhttps://github.com/nealrichardson/httptest/pull/77\n\nhttptest2 - https://github.com/nealrichardson/httptest2/pull/22\nknitr:\n\nhttps://github.com/yihui/knitr/pull/1345\nhttps://github.com/yihui/knitr/pull/832\nhttps://github.com/yihui/knitr/pull/831\n\ntestthat:\n\nhttps://github.com/r-lib/testthat/pull/823\nhttps://github.com/r-lib/testthat/pull/268\nhttps://github.com/r-lib/testthat/pull/214\nhttps://github.com/r-lib/testthat/pull/120\nhttps://github.com/r-lib/testthat/pull/106\nhttps://github.com/r-lib/testthat/pull/98\nhttps://github.com/r-lib/testthat/pull/96\nhttps://github.com/r-lib/testthat/pull/85\n\n\n\n\n\n\ntrivy-offline - https://github.com/sighupio/trivy-offline/pull/13\nsast-parser - https://github.com/pcfens/sast-parser/pull/5\nmt-aws-glacier: https://github.com/vsespb/mt-aws-glacier/pull/24\nrocker:\n\nhttps://github.com/rocker-org/website/pull/4\nhttps://github.com/rocker-org/rocker-versioned/pull/57\nhttps://github.com/rocker-org/rocker-versioned/pull/7\nhttps://github.com/rocker-org/rocker-versioned/pull/5\nhttps://github.com/rocker-org/rocker-versioned/pull/3\n\nswig: Incorporated some patches to the Perl5 module related to           the -hide option and the destruction of objects.           Patch submitted by Karl Forner.\n\n\n\n\n\nrclone - https://github.com/rclone/rclone/pull/5556\n\n\n\n\n\n\nR\n\nR 3.0.3 - namespaceImportFrom() needed to detect primitive functions when checking for duplicated imports (reported by Karl Forner).\nR 3.0.2 - package.skeleton() was not starting its search for function objects in the correct place if environment was supplied. (Reported by Karl Forner.)\nR 3.0.1 - The return value when all workers failed from parallel::mclapply(mc.preschedule = TRUE) was a list of strings and not of error objects. (Spotted by Karl Forner and Bernd Bischl.)"
  },
  {
    "objectID": "contributions.html#published-opensource-projects",
    "href": "contributions.html#published-opensource-projects",
    "title": "my OpenSource contributions",
    "section": "",
    "text": "Perl\n\nDBIx::Class::LookupColumn (with Thomas Rubbatel) - https://metacpan.org/pod/DBIx::Class::LookupColumn::Auto\n\nR\n\nsrcpkgs: https://github.com/kforner/srcpkgs\nRcppProgress: https://github.com/kforner/rcpp_progress\nPlinker: https://github.com/kforner/plinker_pkg (note: not on CRAN)\nquartzbio.edp: https://github.com/kforner/quartzbio.edp\nallelic (fueatest): https://cran.r-project.org/web/packages/allelic/index.html (removed from CRAN), https://github.com/kforner/fueatest\nsnplinkage (with others): https://cran.r-project.org/web/packages/snplinkage/\n\n\n\n\n\nTransmart docker: https://github.com/kforner/docker_transmart\nR coverage patch: adding test coverage support in the R interpreter\n\nhttps://github.com/kforner/r-coverage-patch\nhttps://github.com/kforner/r-coverage-docker"
  },
  {
    "objectID": "contributions.html#contributions-to-existing-projects",
    "href": "contributions.html#contributions-to-existing-projects",
    "title": "my OpenSource contributions",
    "section": "",
    "text": "debugme: https://github.com/r-lib/debugme/pull/21\ndevtools:\n\nhttps://github.com/r-lib/devtools/pull/334\n\n\ncovr:\n\nhttps://github.com/r-lib/covr/pull/202\nhttps://github.com/r-lib/covr/pull/193\nhttps://github.com/r-lib/covr/pull/123\nhttps://github.com/r-lib/covr/pull/32\nhttps://github.com/r-lib/covr/pull/30\n\nhttptest:\n\nhttps://github.com/nealrichardson/httptest/pull/79\nhttps://github.com/nealrichardson/httptest/pull/77\n\nhttptest2 - https://github.com/nealrichardson/httptest2/pull/22\nknitr:\n\nhttps://github.com/yihui/knitr/pull/1345\nhttps://github.com/yihui/knitr/pull/832\nhttps://github.com/yihui/knitr/pull/831\n\ntestthat:\n\nhttps://github.com/r-lib/testthat/pull/823\nhttps://github.com/r-lib/testthat/pull/268\nhttps://github.com/r-lib/testthat/pull/214\nhttps://github.com/r-lib/testthat/pull/120\nhttps://github.com/r-lib/testthat/pull/106\nhttps://github.com/r-lib/testthat/pull/98\nhttps://github.com/r-lib/testthat/pull/96\nhttps://github.com/r-lib/testthat/pull/85\n\n\n\n\n\n\ntrivy-offline - https://github.com/sighupio/trivy-offline/pull/13\nsast-parser - https://github.com/pcfens/sast-parser/pull/5\nmt-aws-glacier: https://github.com/vsespb/mt-aws-glacier/pull/24\nrocker:\n\nhttps://github.com/rocker-org/website/pull/4\nhttps://github.com/rocker-org/rocker-versioned/pull/57\nhttps://github.com/rocker-org/rocker-versioned/pull/7\nhttps://github.com/rocker-org/rocker-versioned/pull/5\nhttps://github.com/rocker-org/rocker-versioned/pull/3\n\nswig: Incorporated some patches to the Perl5 module related to           the -hide option and the destruction of objects.           Patch submitted by Karl Forner.\n\n\n\n\n\nrclone - https://github.com/rclone/rclone/pull/5556"
  },
  {
    "objectID": "contributions.html#important-bug-reports-leading-to-official-fixes",
    "href": "contributions.html#important-bug-reports-leading-to-official-fixes",
    "title": "my OpenSource contributions",
    "section": "",
    "text": "R\n\nR 3.0.3 - namespaceImportFrom() needed to detect primitive functions when checking for duplicated imports (reported by Karl Forner).\nR 3.0.2 - package.skeleton() was not starting its search for function objects in the correct place if environment was supplied. (Reported by Karl Forner.)\nR 3.0.1 - The return value when all workers failed from parallel::mclapply(mc.preschedule = TRUE) was a list of strings and not of error objects. (Spotted by Karl Forner and Bernd Bischl.)"
  },
  {
    "objectID": "posts/organizing_dev_with_srcpkgs/index.html",
    "href": "posts/organizing_dev_with_srcpkgs/index.html",
    "title": "Organizing R development using srcpkgs",
    "section": "",
    "text": "Some notes for a talk about srcpkgs for the Vital-IT Analysts meeting"
  },
  {
    "objectID": "posts/organizing_dev_with_srcpkgs/index.html#overview",
    "href": "posts/organizing_dev_with_srcpkgs/index.html#overview",
    "title": "Organizing R development using srcpkgs",
    "section": "Overview",
    "text": "Overview\nThis is about how to organize R projects in order to:\n\nreuse code\nshare code\nincrease robustness\nenable analysis (code) reproducibility\nhave fun\n\nThe context is mostly for analysis oriented R projects."
  },
  {
    "objectID": "posts/organizing_dev_with_srcpkgs/index.html#r-packages",
    "href": "posts/organizing_dev_with_srcpkgs/index.html#r-packages",
    "title": "Organizing R development using srcpkgs",
    "section": "R packages",
    "text": "R packages\nAll R users use R packages, the core ones such as base, stats, tools, and some from CRAN or BioConductor.\nWhy would you want to use R packages for your own code???\na R package is:\n\nself-contained\n\nit bundles together all related code, the documentation, the relevant data and tests\n\nthe dependencies are explicitly stated, and are themselves R packages"
  },
  {
    "objectID": "posts/organizing_dev_with_srcpkgs/index.html#on-the-natural-evolution-of-code-projects",
    "href": "posts/organizing_dev_with_srcpkgs/index.html#on-the-natural-evolution-of-code-projects",
    "title": "Organizing R development using srcpkgs",
    "section": "On the natural evolution of code projects…",
    "text": "On the natural evolution of code projects…\nMy view on the general evolution of analysis projects:\n\nyou start with a single script, sequential, with no functions\nat one point (after writing hundreds or thousands of lines) you realize that you need some functions\nthen you start reusing those functions across projects by copy/paste. This raises a number of problems\n\nversioning: at one point you will fix or improve such a function\n\nit may be difficult to remember which project contains the latest version\nwhat of the projects that contain the incorrect versions?\n\n\nthen you may want, if you work in a team, to share this code with colleagues, or to use theirs\n\n–&gt; it requires some documentation, even terse.\nthere’s a increased responsibility. What if your code is wrong and impact the projects of your colleagues? One remedy is to write tests for those functions.\nthose functions are seldom independent, so that you can not just pick one\nall those functions are exposed (i.e public or exported).\n\nif you start to use a low-level function in your project, and that in the next version it has been refactored and that this function has been changed, or removed, updating the shared code will break the project.\n\n\nfor all those reasons you start packaging your reusable code as a R package\n\nyou can add documentation, tests, group code logically. It brings a namespace so that you can decide what you expose.\n\nBut… it does NOT really solve the versioning problem\n\nin R, packages have to be installed (e.g. using install.packages()) before you can use them with library(mypkg)\npackages have a version number (N.B: this is not the same as code versioning)\nif you use version v1 in your project A, and version v2 in project B, you have to juggle with versions (install/uninstall) Of course there are some tools to deal with that (renv…) but they work with external packages (or you need some private custom repositories)\nand it’s very cumbersome. Suppose that in your project A you find a bug in the (installed package). In order to fix it, you need to\n\nfetch the source code of the package\ntry to reproduce your problem. Chances are that you need your project data, you have to reproduce your session\nfinally, if you manage to fix it. You have to publish it, install it.\n\n\nmy approach is to use what I call R source packages\n\nthey are normal R packages, but instead of installing them on your R system, you load them directly from source in your R session.\nit was made possible by the infamous Hadley Wickham, and his devtools::load_all() function, that mimics the loading of an installed package\nthis greatly helps with all those problems:\n\nyou embed your source packages inside your project (as git submodules, we’ll that see later) this solves the versioning/reproducibiliy at your reusable code level: all your projects may use a different version\n\nif you need to fix a bug, or improve and augment your reusable code, it’s a simple as editing the code for your project. And using srcpkgs, you can even easily reload the code inside your existing R sessions, without losing any computed data.\n\nso far so good. Then for ease of maintenance/modularity, you start splitting your reusable code by category, and develop several R packages, e.g. one for some misc utilities, one for loading data from your database, one for some specific analysis…\n\nthis is where srcpkgs become usefuls, since devtools was designed to manage a single R source package, not a collection/library of possible inter-dependent packages.\n\nadditionally has a useful little hack that enables you to use the standard library() function to load your source packages. So that when you analysis is finalized, or deployed in production, with your packages installed in the standard way, your script will continue to worl without any change.\n\n\nBut this does not solve the reproducibility for the external packages\n\nyour code and source library most certainly use external packages, and also depend on your R version (and thus on the bioconductor version)\nit may also depend on your OS architecture (CPU…)\nthis is out of scope for that talk, but one solution for that is to use a virtualized development environment: a docker container (cf https://rocker-project.org/) that contains a fixed version of R, and of all the needed external packages.\nnow the challenge is to synchronize that docker container version with your source library version…\nalso cf https://code.visualstudio.com/docs/devcontainers/containers\n\n\n\nSummary\nscript --&gt; script+functions --&gt; script + source files --&gt;  R package --&gt; R source package --&gt; R source library [ + R docker env]"
  },
  {
    "objectID": "posts/organizing_dev_with_srcpkgs/index.html#my-recommended-project-setup",
    "href": "posts/organizing_dev_with_srcpkgs/index.html#my-recommended-project-setup",
    "title": "Organizing R development using srcpkgs",
    "section": "My recommended project setup",
    "text": "My recommended project setup\n\nthe source library of R packages\n\nshould be a single dedicated git repository\n\nrecommended since it’s easier to have consistent versions of interdependent packages\nbut each package could be in its own git repository if needed\n\neach package should contain tests (very important, even if it’s counter intuitive, but there is usually more value in the test suite than in the code itself, don’t get me started on that…)\nfor internal packages, especially for a public of developers I personally that the documentation is less important, for example that for a publicly released package.\nyou should use CI (Continuous Integration, like github actions or gitlab CI) to automatically run the automated tests each time you push to the repository.\nalso, reporting the test coverage is important\n\nthe project code\n\nMUST be versioned in a git repository (in github/gitlab…)\nshould itself be a R (source) package\n\neasier to add tests, documentation, vignettes\n\nbut can be a single script or a set of source files\ncontain a given version (commit/tag/branch) of the source library as a git submodule\nshould contain a vscode devcontainer to execute the project’s code (automatically usable via github codespaces)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am a computer scientist (and mathematician) by training, and have always worked in bioinformatics and pharmaceutical field. I am really experienced in R programming (but I also code in Perl, Python, C++, java) and more generally in setting up and leading software development platforms, in particular for reproducible research. In particular I pioneered the use of docker containers as reproducible computing development environments.\nI am also fond of software optimization and parallelization.\nLately, I’m working as a consultant, so don’t hesitate to contact me if you like my work.\nAnd I am a fervent proponent of OpenSource software:\nmy OpenSource contributions"
  }
]